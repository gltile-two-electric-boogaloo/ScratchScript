//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../ScratchIR.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ScratchIRParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, Event=38, 
		Type=39, ProcedureType=40, NumberType=41, StringType=42, ListType=43, 
		StringNumberType=44, BooleanType=45, ArgumentReporterIdentifier=46, Hashtag=47, 
		Minus=48, Colon=49, End=50, Whitespace=51, NewLine=52, Number=53, Identifier=54, 
		String=55, Color=56;
	public const int
		RULE_program = 0, RULE_command = 1, RULE_topLevelCommand = 2, RULE_block = 3, 
		RULE_expression = 4, RULE_elseIfStatement = 5, RULE_ifStatement = 6, RULE_procedureArgument = 7, 
		RULE_callProcedureArgument = 8, RULE_procedureArgumentType = 9, RULE_variableIdentifier = 10, 
		RULE_constant = 11, RULE_procedureArgumentTypeDeclaration = 12, RULE_addOperators = 13, 
		RULE_multiplyOperators = 14, RULE_booleanOperators = 15, RULE_compareOperators = 16;
	public static readonly string[] ruleNames = {
		"program", "command", "topLevelCommand", "block", "expression", "elseIfStatement", 
		"ifStatement", "procedureArgument", "callProcedureArgument", "procedureArgumentType", 
		"variableIdentifier", "constant", "procedureArgumentTypeDeclaration", 
		"addOperators", "multiplyOperators", "booleanOperators", "compareOperators"
	};

	private static readonly string[] _LiteralNames = {
		null, "'set'", "'while'", "'repeat'", "'call'", "'raw'", "'push'", "'pushat'", 
		"'pop'", "'popat'", "'popall'", "'load'", "'proc'", "'on'", "'('", "')'", 
		"'rawshadow'", "'endshadow'", "'!'", "'if'", "'else'", "'i:'", "'f:'", 
		"'v:'", "'+'", "'~'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'^'", "'=='", 
		"'!='", "'>'", "'>='", "'<'", "'<='", "'start'", null, null, "':n'", "':s'", 
		"':l'", "':sn'", "':b'", "'argr:'", "'#'", "'-'", "':'", "'end'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Event", "Type", "ProcedureType", "NumberType", "StringType", 
		"ListType", "StringNumberType", "BooleanType", "ArgumentReporterIdentifier", 
		"Hashtag", "Minus", "Colon", "End", "Whitespace", "NewLine", "Number", 
		"Identifier", "String", "Color"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchIR.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchIRParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScratchIRParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScratchIRParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ScratchIRParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14336L) != 0)) {
				{
				{
				State = 34;
				block();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
	 
		public CommandContext() { }
		public virtual void CopyFrom(CommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PushAtCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PushAtCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPushAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPushAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushAtCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopAllCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public PopAllCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopAllCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopAllCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopAllCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PushCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PushCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPushCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPushCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public WhileCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitWhileCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public PopCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IfCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitIfCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RepeatCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public RepeatCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRepeatCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext[] callProcedureArgument() {
			return GetRuleContexts<CallProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext callProcedureArgument(int i) {
			return GetRuleContext<CallProcedureArgumentContext>(i);
		}
		public CallCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCallCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCallCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SetCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterSetCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitSetCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PopAtCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PopAtCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterPopAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitPopAtCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopAtCommand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RawCommandContext : CommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext[] callProcedureArgument() {
			return GetRuleContexts<CallProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext callProcedureArgument(int i) {
			return GetRuleContext<CallProcedureArgumentContext>(i);
		}
		public RawCommandContext(CommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRawCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			int _alt;
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				_localctx = new SetCommandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				Match(T__0);
				State = 43;
				variableIdentifier();
				State = 44;
				expression();
				}
				break;
			case T__1:
				_localctx = new WhileCommandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				Match(T__1);
				State = 47;
				expression();
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 48;
						command();
						}
						} 
					}
					State = 53;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				State = 54;
				Match(End);
				}
				break;
			case T__2:
				_localctx = new RepeatCommandContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 56;
				Match(T__2);
				State = 57;
				expression();
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 58;
						command();
						}
						} 
					}
					State = 63;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				State = 64;
				Match(End);
				}
				break;
			case T__18:
				_localctx = new IfCommandContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 66;
				ifStatement();
				}
				break;
			case T__3:
				_localctx = new CallCommandContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 67;
				Match(T__3);
				State = 68;
				Match(Identifier);
				State = 72;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 69;
						callProcedureArgument();
						}
						} 
					}
					State = 74;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				break;
			case T__4:
				_localctx = new RawCommandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 75;
				Match(T__4);
				State = 76;
				Match(Identifier);
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 77;
						callProcedureArgument();
						}
						} 
					}
					State = 82;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				break;
			case T__5:
				_localctx = new PushCommandContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 83;
				Match(T__5);
				State = 84;
				Match(Identifier);
				State = 85;
				expression();
				}
				break;
			case T__6:
				_localctx = new PushAtCommandContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 86;
				Match(T__6);
				State = 87;
				Match(Identifier);
				State = 88;
				expression();
				State = 89;
				expression();
				}
				break;
			case T__7:
				_localctx = new PopCommandContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 91;
				Match(T__7);
				State = 92;
				Match(Identifier);
				}
				break;
			case T__8:
				_localctx = new PopAtCommandContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 93;
				Match(T__8);
				State = 94;
				Match(Identifier);
				State = 95;
				expression();
				}
				break;
			case T__9:
				_localctx = new PopAllCommandContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 96;
				Match(T__9);
				State = 97;
				Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelCommandContext : ParserRuleContext {
		public TopLevelCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelCommand; } }
	 
		public TopLevelCommandContext() { }
		public virtual void CopyFrom(TopLevelCommandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LoadCommandContext : TopLevelCommandContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type() { return GetToken(ScratchIRParser.Type, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		public LoadCommandContext(TopLevelCommandContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterLoadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitLoadCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelCommandContext topLevelCommand() {
		TopLevelCommandContext _localctx = new TopLevelCommandContext(Context, State);
		EnterRule(_localctx, 4, RULE_topLevelCommand);
		try {
			_localctx = new LoadCommandContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__10);
			State = 101;
			Match(Type);
			State = 102;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProcedureBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext[] procedureArgument() {
			return GetRuleContexts<ProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext procedureArgument(int i) {
			return GetRuleContext<ProcedureArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ProcedureBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EventBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Event() { return GetToken(ScratchIRParser.Event, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public EventBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterEventBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitEventBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TopLevelBlockContext : BlockContext {
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelCommandContext topLevelCommand() {
			return GetRuleContext<TopLevelCommandContext>(0);
		}
		public TopLevelBlockContext(BlockContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterTopLevelBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitTopLevelBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			int _alt;
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				_localctx = new ProcedureBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				Match(T__11);
				State = 105;
				Match(Identifier);
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Identifier) {
					{
					{
					State = 106;
					procedureArgument();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 112;
						command();
						}
						} 
					}
					State = 117;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 118;
				Match(End);
				}
				break;
			case T__12:
				_localctx = new EventBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				Match(T__12);
				State = 120;
				Match(Event);
				State = 124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 121;
						command();
						}
						} 
					}
					State = 126;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				State = 127;
				Match(End);
				}
				break;
			case T__10:
				_localctx = new TopLevelBlockContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128;
				topLevelCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hashtag() { return GetToken(ScratchIRParser.Hashtag, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ListAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterListAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitListAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RawShadowExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext[] callProcedureArgument() {
			return GetRuleContexts<CallProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallProcedureArgumentContext callProcedureArgument(int i) {
			return GetRuleContext<CallProcedureArgumentContext>(i);
		}
		public RawShadowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterRawShadowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitRawShadowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRawShadowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableIdentifierContext variableIdentifier() {
			return GetRuleContext<VariableIdentifierContext>(0);
		}
		public VariableExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitVariableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression);
		try {
			int _alt;
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
			case String:
			case Color:
				_localctx = new ConstantExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				constant();
				}
				break;
			case T__22:
				_localctx = new VariableExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				variableIdentifier();
				}
				break;
			case T__13:
				_localctx = new ParenthesizedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				Match(T__13);
				State = 134;
				expression();
				State = 135;
				Match(T__14);
				}
				break;
			case T__23:
			case T__24:
			case Minus:
				_localctx = new BinaryAddExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				addOperators();
				State = 138;
				expression();
				State = 139;
				expression();
				}
				break;
			case T__25:
			case T__26:
			case T__27:
				_localctx = new BinaryMultiplyExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 141;
				multiplyOperators();
				State = 142;
				expression();
				State = 143;
				expression();
				}
				break;
			case T__28:
			case T__29:
			case T__30:
				_localctx = new BinaryBooleanExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 145;
				booleanOperators();
				State = 146;
				expression();
				State = 147;
				expression();
				}
				break;
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
				_localctx = new BinaryCompareExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 149;
				compareOperators();
				State = 150;
				expression();
				State = 151;
				expression();
				}
				break;
			case T__15:
				_localctx = new RawShadowExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 153;
				Match(T__15);
				State = 154;
				Match(Identifier);
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 155;
						callProcedureArgument();
						}
						} 
					}
					State = 160;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 161;
				Match(T__16);
				}
				break;
			case T__17:
				_localctx = new NotExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 162;
				Match(T__17);
				State = 163;
				expression();
				}
				break;
			case Identifier:
				_localctx = new ListAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 164;
				Match(Identifier);
				State = 165;
				Match(Hashtag);
				State = 166;
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_elseIfStatement);
		try {
			int _alt;
			State = 177;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 169;
						command();
						}
						} 
					}
					State = 174;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				State = 175;
				Match(End);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				ifStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode End() { return GetToken(ScratchIRParser.End, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(T__18);
			State = 180;
			expression();
			State = 184;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 181;
					command();
					}
					} 
				}
				State = 186;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 187;
			Match(End);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 188;
				Match(T__19);
				State = 189;
				elseIfStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentTypeDeclarationContext procedureArgumentTypeDeclaration() {
			return GetRuleContext<ProcedureArgumentTypeDeclarationContext>(0);
		}
		public ProcedureArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentContext procedureArgument() {
		ProcedureArgumentContext _localctx = new ProcedureArgumentContext(Context, State);
		EnterRule(_localctx, 14, RULE_procedureArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(Identifier);
			State = 193;
			procedureArgumentTypeDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallProcedureArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentTypeContext procedureArgumentType() {
			return GetRuleContext<ProcedureArgumentTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchIRParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CallProcedureArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callProcedureArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCallProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCallProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallProcedureArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallProcedureArgumentContext callProcedureArgument() {
		CallProcedureArgumentContext _localctx = new CallProcedureArgumentContext(Context, State);
		EnterRule(_localctx, 16, RULE_callProcedureArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			procedureArgumentType();
			State = 196;
			Match(Identifier);
			State = 197;
			Match(Colon);
			State = 198;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentTypeContext : ParserRuleContext {
		public ProcedureArgumentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgumentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureArgumentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureArgumentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgumentType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentTypeContext procedureArgumentType() {
		ProcedureArgumentTypeContext _localctx = new ProcedureArgumentTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_procedureArgumentType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchIRParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ArgumentReporterIdentifier() { return GetToken(ScratchIRParser.ArgumentReporterIdentifier, 0); }
		public VariableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableIdentifierContext variableIdentifier() {
		VariableIdentifierContext _localctx = new VariableIdentifierContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__22);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ArgumentReporterIdentifier) {
				{
				State = 203;
				Match(ArgumentReporterIdentifier);
				}
			}

			State = 206;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(ScratchIRParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchIRParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ScratchIRParser.Color, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 22, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 117093590311632896L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProcedureType() { return GetToken(ScratchIRParser.ProcedureType, 0); }
		public ProcedureArgumentTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgumentTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterProcedureArgumentTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitProcedureArgumentTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgumentTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentTypeDeclarationContext procedureArgumentTypeDeclaration() {
		ProcedureArgumentTypeDeclarationContext _localctx = new ProcedureArgumentTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 24, RULE_procedureArgumentTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(ProcedureType);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(ScratchIRParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 26, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 281475027042304L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 28, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 469762048L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 30, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3758096384L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchIRListener typedListener = listener as IScratchIRListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchIRVisitor<TResult> typedVisitor = visitor as IScratchIRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 32, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 270582939648L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,56,221,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,0,1,0,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,5,1,50,8,1,10,1,12,1,53,9,1,1,1,1,1,1,1,1,1,1,1,5,1,
		60,8,1,10,1,12,1,63,9,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,71,8,1,10,1,12,1,74,
		9,1,1,1,1,1,1,1,5,1,79,8,1,10,1,12,1,82,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,99,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,
		3,5,3,108,8,3,10,3,12,3,111,9,3,1,3,5,3,114,8,3,10,3,12,3,117,9,3,1,3,
		1,3,1,3,1,3,5,3,123,8,3,10,3,12,3,126,9,3,1,3,1,3,3,3,130,8,3,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,5,4,157,8,4,10,4,12,4,160,9,4,1,4,1,4,1,4,1,4,1,
		4,1,4,3,4,168,8,4,1,5,5,5,171,8,5,10,5,12,5,174,9,5,1,5,1,5,3,5,178,8,
		5,1,6,1,6,1,6,5,6,183,8,6,10,6,12,6,186,9,6,1,6,1,6,1,6,3,6,191,8,6,1,
		7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,3,10,205,8,10,1,10,1,10,
		1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,9,51,
		61,72,80,115,124,158,172,184,0,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,0,6,1,0,21,22,2,0,53,53,55,56,2,0,24,25,48,48,1,0,26,28,1,0,29,
		31,1,0,32,37,238,0,37,1,0,0,0,2,98,1,0,0,0,4,100,1,0,0,0,6,129,1,0,0,0,
		8,167,1,0,0,0,10,177,1,0,0,0,12,179,1,0,0,0,14,192,1,0,0,0,16,195,1,0,
		0,0,18,200,1,0,0,0,20,202,1,0,0,0,22,208,1,0,0,0,24,210,1,0,0,0,26,212,
		1,0,0,0,28,214,1,0,0,0,30,216,1,0,0,0,32,218,1,0,0,0,34,36,3,6,3,0,35,
		34,1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,40,1,0,0,0,39,
		37,1,0,0,0,40,41,5,0,0,1,41,1,1,0,0,0,42,43,5,1,0,0,43,44,3,20,10,0,44,
		45,3,8,4,0,45,99,1,0,0,0,46,47,5,2,0,0,47,51,3,8,4,0,48,50,3,2,1,0,49,
		48,1,0,0,0,50,53,1,0,0,0,51,52,1,0,0,0,51,49,1,0,0,0,52,54,1,0,0,0,53,
		51,1,0,0,0,54,55,5,50,0,0,55,99,1,0,0,0,56,57,5,3,0,0,57,61,3,8,4,0,58,
		60,3,2,1,0,59,58,1,0,0,0,60,63,1,0,0,0,61,62,1,0,0,0,61,59,1,0,0,0,62,
		64,1,0,0,0,63,61,1,0,0,0,64,65,5,50,0,0,65,99,1,0,0,0,66,99,3,12,6,0,67,
		68,5,4,0,0,68,72,5,54,0,0,69,71,3,16,8,0,70,69,1,0,0,0,71,74,1,0,0,0,72,
		73,1,0,0,0,72,70,1,0,0,0,73,99,1,0,0,0,74,72,1,0,0,0,75,76,5,5,0,0,76,
		80,5,54,0,0,77,79,3,16,8,0,78,77,1,0,0,0,79,82,1,0,0,0,80,81,1,0,0,0,80,
		78,1,0,0,0,81,99,1,0,0,0,82,80,1,0,0,0,83,84,5,6,0,0,84,85,5,54,0,0,85,
		99,3,8,4,0,86,87,5,7,0,0,87,88,5,54,0,0,88,89,3,8,4,0,89,90,3,8,4,0,90,
		99,1,0,0,0,91,92,5,8,0,0,92,99,5,54,0,0,93,94,5,9,0,0,94,95,5,54,0,0,95,
		99,3,8,4,0,96,97,5,10,0,0,97,99,5,54,0,0,98,42,1,0,0,0,98,46,1,0,0,0,98,
		56,1,0,0,0,98,66,1,0,0,0,98,67,1,0,0,0,98,75,1,0,0,0,98,83,1,0,0,0,98,
		86,1,0,0,0,98,91,1,0,0,0,98,93,1,0,0,0,98,96,1,0,0,0,99,3,1,0,0,0,100,
		101,5,11,0,0,101,102,5,39,0,0,102,103,5,54,0,0,103,5,1,0,0,0,104,105,5,
		12,0,0,105,109,5,54,0,0,106,108,3,14,7,0,107,106,1,0,0,0,108,111,1,0,0,
		0,109,107,1,0,0,0,109,110,1,0,0,0,110,115,1,0,0,0,111,109,1,0,0,0,112,
		114,3,2,1,0,113,112,1,0,0,0,114,117,1,0,0,0,115,116,1,0,0,0,115,113,1,
		0,0,0,116,118,1,0,0,0,117,115,1,0,0,0,118,130,5,50,0,0,119,120,5,13,0,
		0,120,124,5,38,0,0,121,123,3,2,1,0,122,121,1,0,0,0,123,126,1,0,0,0,124,
		125,1,0,0,0,124,122,1,0,0,0,125,127,1,0,0,0,126,124,1,0,0,0,127,130,5,
		50,0,0,128,130,3,4,2,0,129,104,1,0,0,0,129,119,1,0,0,0,129,128,1,0,0,0,
		130,7,1,0,0,0,131,168,3,22,11,0,132,168,3,20,10,0,133,134,5,14,0,0,134,
		135,3,8,4,0,135,136,5,15,0,0,136,168,1,0,0,0,137,138,3,26,13,0,138,139,
		3,8,4,0,139,140,3,8,4,0,140,168,1,0,0,0,141,142,3,28,14,0,142,143,3,8,
		4,0,143,144,3,8,4,0,144,168,1,0,0,0,145,146,3,30,15,0,146,147,3,8,4,0,
		147,148,3,8,4,0,148,168,1,0,0,0,149,150,3,32,16,0,150,151,3,8,4,0,151,
		152,3,8,4,0,152,168,1,0,0,0,153,154,5,16,0,0,154,158,5,54,0,0,155,157,
		3,16,8,0,156,155,1,0,0,0,157,160,1,0,0,0,158,159,1,0,0,0,158,156,1,0,0,
		0,159,161,1,0,0,0,160,158,1,0,0,0,161,168,5,17,0,0,162,163,5,18,0,0,163,
		168,3,8,4,0,164,165,5,54,0,0,165,166,5,47,0,0,166,168,3,8,4,0,167,131,
		1,0,0,0,167,132,1,0,0,0,167,133,1,0,0,0,167,137,1,0,0,0,167,141,1,0,0,
		0,167,145,1,0,0,0,167,149,1,0,0,0,167,153,1,0,0,0,167,162,1,0,0,0,167,
		164,1,0,0,0,168,9,1,0,0,0,169,171,3,2,1,0,170,169,1,0,0,0,171,174,1,0,
		0,0,172,173,1,0,0,0,172,170,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,
		178,5,50,0,0,176,178,3,12,6,0,177,172,1,0,0,0,177,176,1,0,0,0,178,11,1,
		0,0,0,179,180,5,19,0,0,180,184,3,8,4,0,181,183,3,2,1,0,182,181,1,0,0,0,
		183,186,1,0,0,0,184,185,1,0,0,0,184,182,1,0,0,0,185,187,1,0,0,0,186,184,
		1,0,0,0,187,190,5,50,0,0,188,189,5,20,0,0,189,191,3,10,5,0,190,188,1,0,
		0,0,190,191,1,0,0,0,191,13,1,0,0,0,192,193,5,54,0,0,193,194,3,24,12,0,
		194,15,1,0,0,0,195,196,3,18,9,0,196,197,5,54,0,0,197,198,5,49,0,0,198,
		199,3,8,4,0,199,17,1,0,0,0,200,201,7,0,0,0,201,19,1,0,0,0,202,204,5,23,
		0,0,203,205,5,46,0,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,
		207,5,54,0,0,207,21,1,0,0,0,208,209,7,1,0,0,209,23,1,0,0,0,210,211,5,40,
		0,0,211,25,1,0,0,0,212,213,7,2,0,0,213,27,1,0,0,0,214,215,7,3,0,0,215,
		29,1,0,0,0,216,217,7,4,0,0,217,31,1,0,0,0,218,219,7,5,0,0,219,33,1,0,0,
		0,17,37,51,61,72,80,98,109,115,124,129,158,167,172,177,184,190,204
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
