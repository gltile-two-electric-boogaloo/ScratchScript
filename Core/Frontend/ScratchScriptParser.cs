//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../ScratchScript.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class ScratchScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Whitespace=1, NewLine=2, Semicolon=3, LeftParen=4, RightParen=5, LeftBracket=6, 
		RightBracket=7, LeftBrace=8, RightBrace=9, Assignment=10, Comma=11, Not=12, 
		Arrow=13, Colon=14, Dot=15, Ternary=16, SingleLineCommentStart=17, MultiLineCommentStart=18, 
		MultiLineCommentEnd=19, Comment=20, At=21, Hashtag=22, Multiply=23, Plus=24, 
		Minus=25, Divide=26, Power=27, Modulus=28, And=29, Or=30, BitwiseAnd=31, 
		BitwiseOr=32, BitwiseXor=33, LeftShift=34, RightShift=35, Greater=36, 
		Lesser=37, GreaterOrEqual=38, LesserOrEqual=39, Equal=40, NotEqual=41, 
		AdditionAsignment=42, SubtractionAssignment=43, MultiplicationAssignment=44, 
		DivisionAssignment=45, ModulusAssignment=46, If=47, Else=48, True=49, 
		False=50, Break=51, Default=52, For=53, Case=54, Switch=55, While=56, 
		VariableDeclare=57, Import=58, ProcedureDeclare=59, Return=60, Repeat=61, 
		Event=62, From=63, Namespace=64, Number=65, Identifier=66, String=67, 
		Color=68;
	public const int
		RULE_program = 0, RULE_topLevelStatement = 1, RULE_line = 2, RULE_statement = 3, 
		RULE_eventStatement = 4, RULE_assignmentStatement = 5, RULE_variableDeclarationStatement = 6, 
		RULE_memberProcedureCallStatement = 7, RULE_procedureCallStatement = 8, 
		RULE_procedureDeclarationStatement = 9, RULE_ifStatement = 10, RULE_whileStatement = 11, 
		RULE_forStatement = 12, RULE_elseIfStatement = 13, RULE_importStatement = 14, 
		RULE_attributeStatement = 15, RULE_returnStatement = 16, RULE_repeatStatement = 17, 
		RULE_breakStatement = 18, RULE_namespaceStatement = 19, RULE_switchStatement = 20, 
		RULE_identifierWithAttribute = 21, RULE_procedureArgument = 22, RULE_expression = 23, 
		RULE_multiplyOperators = 24, RULE_shiftOperators = 25, RULE_addOperators = 26, 
		RULE_compareOperators = 27, RULE_booleanOperators = 28, RULE_assignmentOperators = 29, 
		RULE_case = 30, RULE_block = 31, RULE_switchBlock = 32, RULE_defaultCase = 33, 
		RULE_constant = 34, RULE_comment = 35, RULE_boolean = 36;
	public static readonly string[] ruleNames = {
		"program", "topLevelStatement", "line", "statement", "eventStatement", 
		"assignmentStatement", "variableDeclarationStatement", "memberProcedureCallStatement", 
		"procedureCallStatement", "procedureDeclarationStatement", "ifStatement", 
		"whileStatement", "forStatement", "elseIfStatement", "importStatement", 
		"attributeStatement", "returnStatement", "repeatStatement", "breakStatement", 
		"namespaceStatement", "switchStatement", "identifierWithAttribute", "procedureArgument", 
		"expression", "multiplyOperators", "shiftOperators", "addOperators", "compareOperators", 
		"booleanOperators", "assignmentOperators", "case", "block", "switchBlock", 
		"defaultCase", "constant", "comment", "boolean"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "';'", "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", 
		"','", "'!'", "'->'", "':'", "'.'", "'?'", "'//'", "'/*'", "'*/'", null, 
		"'@'", "'#'", "'*'", "'+'", "'-'", "'/'", "'**'", "'%'", "'&&'", "'||'", 
		"'&'", "'|'", "'^'", "'<<'", "'>>'", "'>'", "'<'", "'>='", "'<='", "'=='", 
		"'!='", "'+='", "'-='", "'*='", "'/='", "'%='", "'if'", "'else'", "'true'", 
		"'false'", "'break'", "'default'", "'for'", null, "'switch'", "'while'", 
		null, null, null, null, "'repeat'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Whitespace", "NewLine", "Semicolon", "LeftParen", "RightParen", 
		"LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Assignment", 
		"Comma", "Not", "Arrow", "Colon", "Dot", "Ternary", "SingleLineCommentStart", 
		"MultiLineCommentStart", "MultiLineCommentEnd", "Comment", "At", "Hashtag", 
		"Multiply", "Plus", "Minus", "Divide", "Power", "Modulus", "And", "Or", 
		"BitwiseAnd", "BitwiseOr", "BitwiseXor", "LeftShift", "RightShift", "Greater", 
		"Lesser", "GreaterOrEqual", "LesserOrEqual", "Equal", "NotEqual", "AdditionAsignment", 
		"SubtractionAssignment", "MultiplicationAssignment", "DivisionAssignment", 
		"ModulusAssignment", "If", "Else", "True", "False", "Break", "Default", 
		"For", "Case", "Switch", "While", "VariableDeclare", "Import", "ProcedureDeclare", 
		"Return", "Repeat", "Event", "From", "Namespace", "Number", "Identifier", 
		"String", "Color"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ScratchScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScratchScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScratchScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScratchScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ScratchScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext[] topLevelStatement() {
			return GetRuleContexts<TopLevelStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelStatementContext topLevelStatement(int i) {
			return GetRuleContext<TopLevelStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 21)) & ~0x3f) == 0 && ((1L << (_la - 21)) & 11407433138177L) != 0)) {
				{
				{
				State = 74;
				topLevelStatement();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 80;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
			return GetRuleContext<ProcedureDeclarationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement() {
			return GetRuleContext<AttributeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventStatementContext eventStatement() {
			return GetRuleContext<EventStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespaceStatementContext namespaceStatement() {
			return GetRuleContext<NamespaceStatementContext>(0);
		}
		public TopLevelStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevelStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitTopLevelStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTopLevelStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelStatementContext topLevelStatement() {
		TopLevelStatementContext _localctx = new TopLevelStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevelStatement);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 82;
				procedureDeclarationStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				attributeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				eventStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 85;
				importStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86;
				namespaceStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
			case Not:
			case Plus:
			case Minus:
			case True:
			case False:
			case VariableDeclare:
			case Number:
			case Identifier:
			case String:
			case Color:
				{
				{
				State = 89;
				statement();
				State = 90;
				Match(Semicolon);
				}
				}
				break;
			case If:
				{
				State = 92;
				ifStatement();
				}
				break;
			case While:
				{
				State = 93;
				whileStatement();
				}
				break;
			case Repeat:
				{
				State = 94;
				repeatStatement();
				}
				break;
			case For:
				{
				State = 95;
				forStatement();
				}
				break;
			case Switch:
				{
				State = 96;
				switchStatement();
				}
				break;
			case Return:
				{
				State = 97;
				returnStatement();
				}
				break;
			case Break:
				{
				State = 98;
				breakStatement();
				}
				break;
			case Comment:
				{
				State = 99;
				comment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStatementContext assignmentStatement() {
			return GetRuleContext<AssignmentStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberProcedureCallStatementContext memberProcedureCallStatement() {
			return GetRuleContext<MemberProcedureCallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				assignmentStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				procedureCallStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				memberProcedureCallStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 105;
				variableDeclarationStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Event() { return GetToken(ScratchScriptParser.Event, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public EventStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStatementContext eventStatement() {
		EventStatementContext _localctx = new EventStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_eventStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(Event);
			State = 109;
			Match(Identifier);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 110;
				Match(LeftParen);
				{
				State = 111;
				expression(0);
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 112;
						Match(Comma);
						State = 113;
						expression(0);
						}
						} 
					}
					State = 118;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				}
				}
				State = 119;
				Match(RightParen);
				}
			}

			State = 123;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentOperatorsContext assignmentOperators() {
			return GetRuleContext<AssignmentOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStatementContext assignmentStatement() {
		AssignmentStatementContext _localctx = new AssignmentStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignmentStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(Identifier);
			State = 126;
			assignmentOperators();
			State = 127;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VariableDeclare() { return GetToken(ScratchScriptParser.VariableDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableDeclarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(VariableDeclare);
			State = 130;
			Match(Identifier);
			State = 131;
			Match(Assignment);
			State = 132;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberProcedureCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(ScratchScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		public MemberProcedureCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberProcedureCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterMemberProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitMemberProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberProcedureCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberProcedureCallStatementContext memberProcedureCallStatement() {
		MemberProcedureCallStatementContext _localctx = new MemberProcedureCallStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_memberProcedureCallStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			expression(0);
			State = 135;
			Match(Dot);
			State = 136;
			procedureCallStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureCallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext[] procedureArgument() {
			return GetRuleContexts<ProcedureArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureArgumentContext procedureArgument(int i) {
			return GetRuleContext<ProcedureArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ProcedureCallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureCallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureCallStatementContext procedureCallStatement() {
		ProcedureCallStatementContext _localctx = new ProcedureCallStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_procedureCallStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(Identifier);
			State = 139;
			Match(LeftParen);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1688849910599760L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 15L) != 0)) {
				{
				State = 140;
				procedureArgument();
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 141;
						Match(Comma);
						State = 142;
						procedureArgument();
						}
						} 
					}
					State = 147;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
			}

			State = 150;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureDeclarationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ProcedureDeclare() { return GetToken(ScratchScriptParser.ProcedureDeclare, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext[] attributeStatement() {
			return GetRuleContexts<AttributeStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement(int i) {
			return GetRuleContext<AttributeStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierWithAttributeContext[] identifierWithAttribute() {
			return GetRuleContexts<IdentifierWithAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierWithAttributeContext identifierWithAttribute(int i) {
			return GetRuleContext<IdentifierWithAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ProcedureDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureDeclarationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureDeclarationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureDeclarationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureDeclarationStatementContext procedureDeclarationStatement() {
		ProcedureDeclarationStatementContext _localctx = new ProcedureDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_procedureDeclarationStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 152;
					attributeStatement();
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 158;
			Match(ProcedureDeclare);
			State = 159;
			Match(Identifier);
			State = 160;
			Match(LeftParen);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At || _la==Identifier) {
				{
				State = 161;
				identifierWithAttribute();
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 162;
						Match(Comma);
						State = 163;
						identifierWithAttribute();
						}
						} 
					}
					State = 168;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
			}

			State = 171;
			Match(RightParen);
			State = 172;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(ScratchScriptParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(ScratchScriptParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement() {
			return GetRuleContext<ElseIfStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(If);
			State = 175;
			Match(LeftParen);
			State = 176;
			expression(0);
			State = 177;
			Match(RightParen);
			State = 178;
			block();
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Else) {
				{
				State = 179;
				Match(Else);
				State = 180;
				elseIfStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(ScratchScriptParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(While);
			State = 184;
			Match(LeftParen);
			State = 185;
			expression(0);
			State = 186;
			Match(RightParen);
			State = 187;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(ScratchScriptParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Semicolon() { return GetTokens(ScratchScriptParser.Semicolon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon(int i) {
			return GetToken(ScratchScriptParser.Semicolon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(For);
			State = 190;
			Match(LeftParen);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 145804037986455632L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 15L) != 0)) {
				{
				State = 191;
				statement();
				}
			}

			State = 194;
			Match(Semicolon);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1688849910599760L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 15L) != 0)) {
				{
				State = 195;
				expression(0);
				}
			}

			State = 198;
			Match(Semicolon);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 145804037986455632L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 15L) != 0)) {
				{
				State = 199;
				statement();
				}
			}

			State = 202;
			Match(RightParen);
			State = 203;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_elseIfStatement);
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				block();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				ifStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(ScratchScriptParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(ScratchScriptParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(ScratchScriptParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(ScratchScriptParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_importStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(Import);
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftBrace) {
				{
				State = 210;
				Match(LeftBrace);
				State = 211;
				Match(Identifier);
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 212;
						Match(Comma);
						State = 213;
						Match(Identifier);
						}
						} 
					}
					State = 218;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 219;
				Match(RightBrace);
				State = 220;
				Match(From);
				}
			}

			State = 223;
			Match(String);
			State = 224;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode At() { return GetToken(ScratchScriptParser.At, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public AttributeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAttributeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAttributeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStatementContext attributeStatement() {
		AttributeStatementContext _localctx = new AttributeStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_attributeStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(At);
			State = 227;
			Match(Identifier);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 228;
				Match(LeftParen);
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 851971L) != 0)) {
					{
					State = 229;
					constant();
					State = 234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 230;
							Match(Comma);
							State = 231;
							constant();
							}
							} 
						}
						State = 236;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					}
					}
				}

				State = 239;
				Match(RightParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(ScratchScriptParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(Return);
			State = 243;
			expression(0);
			State = 244;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Repeat() { return GetToken(ScratchScriptParser.Repeat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_repeatStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(Repeat);
			State = 247;
			Match(LeftParen);
			State = 248;
			expression(0);
			State = 249;
			Match(RightParen);
			State = 250;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(ScratchScriptParser.Break, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(Break);
			State = 253;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(ScratchScriptParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Semicolon() { return GetToken(ScratchScriptParser.Semicolon, 0); }
		public NamespaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitNamespaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStatementContext namespaceStatement() {
		NamespaceStatementContext _localctx = new NamespaceStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_namespaceStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(Namespace);
			State = 256;
			Match(String);
			State = 257;
			Match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Switch() { return GetToken(ScratchScriptParser.Switch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SwitchBlockContext switchBlock() {
			return GetRuleContext<SwitchBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(Switch);
			State = 260;
			Match(LeftParen);
			State = 261;
			expression(0);
			State = 262;
			Match(RightParen);
			State = 263;
			switchBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierWithAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeStatementContext attributeStatement() {
			return GetRuleContext<AttributeStatementContext>(0);
		}
		public IdentifierWithAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierWithAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierWithAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierWithAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierWithAttributeContext identifierWithAttribute() {
		IdentifierWithAttributeContext _localctx = new IdentifierWithAttributeContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifierWithAttribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==At) {
				{
				State = 265;
				attributeStatement();
				}
			}

			State = 268;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		public ProcedureArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureArgumentContext procedureArgument() {
		ProcedureArgumentContext _localctx = new ProcedureArgumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_procedureArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 270;
				Match(Identifier);
				State = 271;
				Match(Colon);
				}
				break;
			}
			State = 274;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BinaryBitwiseAndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseAnd() { return GetToken(ScratchScriptParser.BitwiseAnd, 0); }
		public BinaryBitwiseAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseOrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseOr() { return GetToken(ScratchScriptParser.BitwiseOr, 0); }
		public BinaryBitwiseOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(ScratchScriptParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(ScratchScriptParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryMultiplyExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplyOperatorsContext multiplyOperators() {
			return GetRuleContext<MultiplyOperatorsContext>(0);
		}
		public BinaryMultiplyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryMultiplyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryMultiplyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitUnaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayInitializeExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(ScratchScriptParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(ScratchScriptParser.Comma, i);
		}
		public ArrayInitializeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterArrayInitializeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitArrayInitializeExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseShiftExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShiftOperatorsContext shiftOperators() {
			return GetRuleContext<ShiftOperatorsContext>(0);
		}
		public BinaryBitwiseShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseShiftExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayAccessExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBracket() { return GetToken(ScratchScriptParser.LeftBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBracket() { return GetToken(ScratchScriptParser.RightBracket, 0); }
		public ArrayAccessExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitArrayAccessExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(ScratchScriptParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(ScratchScriptParser.RightParen, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProcedureCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		public ProcedureCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBooleanExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanOperatorsContext booleanOperators() {
			return GetRuleContext<BooleanOperatorsContext>(0);
		}
		public BinaryBooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryBitwiseXorExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BitwiseXor() { return GetToken(ScratchScriptParser.BitwiseXor, 0); }
		public BinaryBitwiseXorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryBitwiseXorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryBitwiseXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryCompareExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompareOperatorsContext compareOperators() {
			return GetRuleContext<CompareOperatorsContext>(0);
		}
		public BinaryCompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryCompareExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ternary() { return GetToken(ScratchScriptParser.Ternary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryAddExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddOperatorsContext addOperators() {
			return GetRuleContext<AddOperatorsContext>(0);
		}
		public BinaryAddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBinaryAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberProcedureCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(ScratchScriptParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureCallStatementContext procedureCallStatement() {
			return GetRuleContext<ProcedureCallStatementContext>(0);
		}
		public MemberProcedureCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterMemberProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitMemberProcedureCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberProcedureCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 277;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 278;
				Match(Identifier);
				}
				break;
			case 3:
				{
				_localctx = new ProcedureCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 279;
				procedureCallStatement();
				}
				break;
			case 4:
				{
				_localctx = new ArrayInitializeExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 280;
				Match(LeftBracket);
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1688849910599760L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 15L) != 0)) {
					{
					State = 281;
					expression(0);
					State = 286;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
					while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1+1 ) {
							{
							{
							State = 282;
							Match(Comma);
							State = 283;
							expression(0);
							}
							} 
						}
						State = 288;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
					}
					}
				}

				State = 291;
				Match(RightBracket);
				}
				break;
			case 5:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 292;
				Match(LeftParen);
				State = 293;
				expression(0);
				State = 294;
				Match(RightParen);
				}
				break;
			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 296;
				Match(Not);
				State = 297;
				expression(12);
				}
				break;
			case 7:
				{
				_localctx = new UnaryAddExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 298;
				addOperators();
				State = 299;
				expression(10);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 348;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 346;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
					case 1:
						{
						_localctx = new BinaryBitwiseOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 303;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 304;
						Match(BitwiseOr);
						State = 305;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new BinaryBitwiseXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 306;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 307;
						Match(BitwiseXor);
						State = 308;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new BinaryBitwiseAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 309;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 310;
						Match(BitwiseAnd);
						State = 311;
						expression(8);
						}
						break;
					case 4:
						{
						_localctx = new BinaryBitwiseShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 312;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 313;
						shiftOperators();
						State = 314;
						expression(7);
						}
						break;
					case 5:
						{
						_localctx = new BinaryMultiplyExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 317;
						multiplyOperators();
						State = 318;
						expression(6);
						}
						break;
					case 6:
						{
						_localctx = new BinaryAddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 320;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 321;
						addOperators();
						State = 322;
						expression(5);
						}
						break;
					case 7:
						{
						_localctx = new BinaryCompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 324;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 325;
						compareOperators();
						State = 326;
						expression(4);
						}
						break;
					case 8:
						{
						_localctx = new BinaryBooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 328;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 329;
						booleanOperators();
						State = 330;
						expression(3);
						}
						break;
					case 9:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 332;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 333;
						Match(Ternary);
						State = 334;
						expression(0);
						State = 335;
						Match(Colon);
						State = 336;
						expression(2);
						}
						break;
					case 10:
						{
						_localctx = new MemberProcedureCallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 338;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 339;
						Match(Dot);
						State = 340;
						procedureCallStatement();
						}
						break;
					case 11:
						{
						_localctx = new ArrayAccessExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 341;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 342;
						Match(LeftBracket);
						State = 343;
						expression(0);
						State = 344;
						Match(RightBracket);
						}
						break;
					}
					} 
				}
				State = 350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplyOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(ScratchScriptParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(ScratchScriptParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(ScratchScriptParser.Modulus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Power() { return GetToken(ScratchScriptParser.Power, 0); }
		public MultiplyOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitMultiplyOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyOperatorsContext multiplyOperators() {
		MultiplyOperatorsContext _localctx = new MultiplyOperatorsContext(Context, State);
		EnterRule(_localctx, 48, RULE_multiplyOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 478150656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftShift() { return GetToken(ScratchScriptParser.LeftShift, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightShift() { return GetToken(ScratchScriptParser.RightShift, 0); }
		public ShiftOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterShiftOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitShiftOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorsContext shiftOperators() {
		ShiftOperatorsContext _localctx = new ShiftOperatorsContext(Context, State);
		EnterRule(_localctx, 50, RULE_shiftOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_la = TokenStream.LA(1);
			if ( !(_la==LeftShift || _la==RightShift) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(ScratchScriptParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(ScratchScriptParser.Minus, 0); }
		public AddOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAddOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOperatorsContext addOperators() {
		AddOperatorsContext _localctx = new AddOperatorsContext(Context, State);
		EnterRule(_localctx, 52, RULE_addOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(ScratchScriptParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEqual() { return GetToken(ScratchScriptParser.NotEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(ScratchScriptParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterOrEqual() { return GetToken(ScratchScriptParser.GreaterOrEqual, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lesser() { return GetToken(ScratchScriptParser.Lesser, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LesserOrEqual() { return GetToken(ScratchScriptParser.LesserOrEqual, 0); }
		public CompareOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitCompareOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOperatorsContext compareOperators() {
		CompareOperatorsContext _localctx = new CompareOperatorsContext(Context, State);
		EnterRule(_localctx, 54, RULE_compareOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4329327034368L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(ScratchScriptParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(ScratchScriptParser.Or, 0); }
		public BooleanOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBooleanOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanOperatorsContext booleanOperators() {
		BooleanOperatorsContext _localctx = new BooleanOperatorsContext(Context, State);
		EnterRule(_localctx, 56, RULE_booleanOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Or) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assignment() { return GetToken(ScratchScriptParser.Assignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AdditionAsignment() { return GetToken(ScratchScriptParser.AdditionAsignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubtractionAssignment() { return GetToken(ScratchScriptParser.SubtractionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MultiplicationAssignment() { return GetToken(ScratchScriptParser.MultiplicationAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivisionAssignment() { return GetToken(ScratchScriptParser.DivisionAssignment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModulusAssignment() { return GetToken(ScratchScriptParser.ModulusAssignment, 0); }
		public AssignmentOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitAssignmentOperators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorsContext assignmentOperators() {
		AssignmentOperatorsContext _localctx = new AssignmentOperatorsContext(Context, State);
		EnterRule(_localctx, 58, RULE_assignmentOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 136339441845248L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Case() { return GetToken(ScratchScriptParser.Case, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCaseContext defaultCase() {
			return GetRuleContext<DefaultCaseContext>(0);
		}
		public CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseContext @case() {
		CaseContext _localctx = new CaseContext(Context, State);
		EnterRule(_localctx, 60, RULE_case);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Case:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 363;
				Match(Case);
				State = 364;
				constant();
				State = 365;
				Match(Colon);
				State = 366;
				block();
				}
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368;
				defaultCase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			Match(LeftBrace);
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3724054679421718608L) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 15L) != 0)) {
				{
				{
				State = 372;
				line();
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 378;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftBrace() { return GetToken(ScratchScriptParser.LeftBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightBrace() { return GetToken(ScratchScriptParser.RightBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext[] @case() {
			return GetRuleContexts<CaseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseContext @case(int i) {
			return GetRuleContext<CaseContext>(i);
		}
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(LeftBrace);
			State = 384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Default || _la==Case) {
				{
				{
				State = 381;
				@case();
				}
				}
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 387;
			Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Default() { return GetToken(ScratchScriptParser.Default, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(ScratchScriptParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DefaultCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitDefaultCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultCase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCaseContext defaultCase() {
		DefaultCaseContext _localctx = new DefaultCaseContext(Context, State);
		EnterRule(_localctx, 66, RULE_defaultCase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(Default);
			State = 390;
			Match(Colon);
			State = 391;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(ScratchScriptParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(ScratchScriptParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(ScratchScriptParser.Color, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 68, RULE_constant);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393;
				Match(Number);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				Match(String);
				}
				break;
			case True:
			case False:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395;
				boolean();
				}
				break;
			case Color:
				EnterOuterAlt(_localctx, 4);
				{
				State = 396;
				Match(Color);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(ScratchScriptParser.Comment, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 70, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			Match(Comment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode True() { return GetToken(ScratchScriptParser.True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode False() { return GetToken(ScratchScriptParser.False, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScratchScriptListener typedListener = listener as IScratchScriptListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IScratchScriptVisitor<TResult> typedVisitor = visitor as IScratchScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 72, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			_la = TokenStream.LA(1);
			if ( !(_la==True || _la==False) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		case 6: return Precpred(Context, 3);
		case 7: return Precpred(Context, 2);
		case 8: return Precpred(Context, 1);
		case 9: return Precpred(Context, 15);
		case 10: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,68,404,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
		3,1,88,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,101,8,2,1,3,
		1,3,1,3,1,3,3,3,107,8,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,115,8,4,10,4,12,4,
		118,9,4,1,4,1,4,3,4,122,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,5,8,144,8,8,10,8,12,8,147,9,8,3,
		8,149,8,8,1,8,1,8,1,9,5,9,154,8,9,10,9,12,9,157,9,9,1,9,1,9,1,9,1,9,1,
		9,1,9,5,9,165,8,9,10,9,12,9,168,9,9,3,9,170,8,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,3,10,182,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,
		12,1,12,1,12,3,12,193,8,12,1,12,1,12,3,12,197,8,12,1,12,1,12,3,12,201,
		8,12,1,12,1,12,1,12,1,13,1,13,3,13,208,8,13,1,14,1,14,1,14,1,14,1,14,5,
		14,215,8,14,10,14,12,14,218,9,14,1,14,1,14,3,14,222,8,14,1,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,5,15,233,8,15,10,15,12,15,236,9,15,3,15,
		238,8,15,1,15,3,15,241,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
		17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,
		20,1,21,3,21,267,8,21,1,21,1,21,1,22,1,22,3,22,273,8,22,1,22,1,22,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,23,285,8,23,10,23,12,23,288,9,23,
		3,23,290,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,302,
		8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,5,23,347,8,23,10,23,12,23,350,9,23,1,24,1,24,1,25,1,25,1,26,
		1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
		370,8,30,1,31,1,31,5,31,374,8,31,10,31,12,31,377,9,31,1,31,1,31,1,32,1,
		32,5,32,383,8,32,10,32,12,32,386,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,3,34,398,8,34,1,35,1,35,1,36,1,36,1,36,7,116,145,155,
		166,216,234,286,1,46,37,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,0,7,2,0,23,
		23,26,28,1,0,34,35,1,0,24,25,1,0,36,41,1,0,29,30,2,0,10,10,42,46,1,0,49,
		50,426,0,77,1,0,0,0,2,87,1,0,0,0,4,100,1,0,0,0,6,106,1,0,0,0,8,108,1,0,
		0,0,10,125,1,0,0,0,12,129,1,0,0,0,14,134,1,0,0,0,16,138,1,0,0,0,18,155,
		1,0,0,0,20,174,1,0,0,0,22,183,1,0,0,0,24,189,1,0,0,0,26,207,1,0,0,0,28,
		209,1,0,0,0,30,226,1,0,0,0,32,242,1,0,0,0,34,246,1,0,0,0,36,252,1,0,0,
		0,38,255,1,0,0,0,40,259,1,0,0,0,42,266,1,0,0,0,44,272,1,0,0,0,46,301,1,
		0,0,0,48,351,1,0,0,0,50,353,1,0,0,0,52,355,1,0,0,0,54,357,1,0,0,0,56,359,
		1,0,0,0,58,361,1,0,0,0,60,369,1,0,0,0,62,371,1,0,0,0,64,380,1,0,0,0,66,
		389,1,0,0,0,68,397,1,0,0,0,70,399,1,0,0,0,72,401,1,0,0,0,74,76,3,2,1,0,
		75,74,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,80,1,0,0,0,
		79,77,1,0,0,0,80,81,5,0,0,1,81,1,1,0,0,0,82,88,3,18,9,0,83,88,3,30,15,
		0,84,88,3,8,4,0,85,88,3,28,14,0,86,88,3,38,19,0,87,82,1,0,0,0,87,83,1,
		0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,3,1,0,0,0,89,90,3,6,
		3,0,90,91,5,3,0,0,91,101,1,0,0,0,92,101,3,20,10,0,93,101,3,22,11,0,94,
		101,3,34,17,0,95,101,3,24,12,0,96,101,3,40,20,0,97,101,3,32,16,0,98,101,
		3,36,18,0,99,101,3,70,35,0,100,89,1,0,0,0,100,92,1,0,0,0,100,93,1,0,0,
		0,100,94,1,0,0,0,100,95,1,0,0,0,100,96,1,0,0,0,100,97,1,0,0,0,100,98,1,
		0,0,0,100,99,1,0,0,0,101,5,1,0,0,0,102,107,3,10,5,0,103,107,3,16,8,0,104,
		107,3,14,7,0,105,107,3,12,6,0,106,102,1,0,0,0,106,103,1,0,0,0,106,104,
		1,0,0,0,106,105,1,0,0,0,107,7,1,0,0,0,108,109,5,62,0,0,109,121,5,66,0,
		0,110,111,5,4,0,0,111,116,3,46,23,0,112,113,5,11,0,0,113,115,3,46,23,0,
		114,112,1,0,0,0,115,118,1,0,0,0,116,117,1,0,0,0,116,114,1,0,0,0,117,119,
		1,0,0,0,118,116,1,0,0,0,119,120,5,5,0,0,120,122,1,0,0,0,121,110,1,0,0,
		0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,3,62,31,0,124,9,1,0,0,0,125,
		126,5,66,0,0,126,127,3,58,29,0,127,128,3,46,23,0,128,11,1,0,0,0,129,130,
		5,57,0,0,130,131,5,66,0,0,131,132,5,10,0,0,132,133,3,46,23,0,133,13,1,
		0,0,0,134,135,3,46,23,0,135,136,5,15,0,0,136,137,3,16,8,0,137,15,1,0,0,
		0,138,139,5,66,0,0,139,148,5,4,0,0,140,145,3,44,22,0,141,142,5,11,0,0,
		142,144,3,44,22,0,143,141,1,0,0,0,144,147,1,0,0,0,145,146,1,0,0,0,145,
		143,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,148,140,1,0,0,0,148,149,1,
		0,0,0,149,150,1,0,0,0,150,151,5,5,0,0,151,17,1,0,0,0,152,154,3,30,15,0,
		153,152,1,0,0,0,154,157,1,0,0,0,155,156,1,0,0,0,155,153,1,0,0,0,156,158,
		1,0,0,0,157,155,1,0,0,0,158,159,5,59,0,0,159,160,5,66,0,0,160,169,5,4,
		0,0,161,166,3,42,21,0,162,163,5,11,0,0,163,165,3,42,21,0,164,162,1,0,0,
		0,165,168,1,0,0,0,166,167,1,0,0,0,166,164,1,0,0,0,167,170,1,0,0,0,168,
		166,1,0,0,0,169,161,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,5,
		5,0,0,172,173,3,62,31,0,173,19,1,0,0,0,174,175,5,47,0,0,175,176,5,4,0,
		0,176,177,3,46,23,0,177,178,5,5,0,0,178,181,3,62,31,0,179,180,5,48,0,0,
		180,182,3,26,13,0,181,179,1,0,0,0,181,182,1,0,0,0,182,21,1,0,0,0,183,184,
		5,56,0,0,184,185,5,4,0,0,185,186,3,46,23,0,186,187,5,5,0,0,187,188,3,62,
		31,0,188,23,1,0,0,0,189,190,5,53,0,0,190,192,5,4,0,0,191,193,3,6,3,0,192,
		191,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,194,196,5,3,0,0,195,197,3,
		46,23,0,196,195,1,0,0,0,196,197,1,0,0,0,197,198,1,0,0,0,198,200,5,3,0,
		0,199,201,3,6,3,0,200,199,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,
		203,5,5,0,0,203,204,3,62,31,0,204,25,1,0,0,0,205,208,3,62,31,0,206,208,
		3,20,10,0,207,205,1,0,0,0,207,206,1,0,0,0,208,27,1,0,0,0,209,221,5,58,
		0,0,210,211,5,8,0,0,211,216,5,66,0,0,212,213,5,11,0,0,213,215,5,66,0,0,
		214,212,1,0,0,0,215,218,1,0,0,0,216,217,1,0,0,0,216,214,1,0,0,0,217,219,
		1,0,0,0,218,216,1,0,0,0,219,220,5,9,0,0,220,222,5,63,0,0,221,210,1,0,0,
		0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,67,0,0,224,225,5,3,0,0,225,
		29,1,0,0,0,226,227,5,21,0,0,227,240,5,66,0,0,228,237,5,4,0,0,229,234,3,
		68,34,0,230,231,5,11,0,0,231,233,3,68,34,0,232,230,1,0,0,0,233,236,1,0,
		0,0,234,235,1,0,0,0,234,232,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,237,
		229,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,241,5,5,0,0,240,228,1,
		0,0,0,240,241,1,0,0,0,241,31,1,0,0,0,242,243,5,60,0,0,243,244,3,46,23,
		0,244,245,5,3,0,0,245,33,1,0,0,0,246,247,5,61,0,0,247,248,5,4,0,0,248,
		249,3,46,23,0,249,250,5,5,0,0,250,251,3,62,31,0,251,35,1,0,0,0,252,253,
		5,51,0,0,253,254,5,3,0,0,254,37,1,0,0,0,255,256,5,64,0,0,256,257,5,67,
		0,0,257,258,5,3,0,0,258,39,1,0,0,0,259,260,5,55,0,0,260,261,5,4,0,0,261,
		262,3,46,23,0,262,263,5,5,0,0,263,264,3,64,32,0,264,41,1,0,0,0,265,267,
		3,30,15,0,266,265,1,0,0,0,266,267,1,0,0,0,267,268,1,0,0,0,268,269,5,66,
		0,0,269,43,1,0,0,0,270,271,5,66,0,0,271,273,5,14,0,0,272,270,1,0,0,0,272,
		273,1,0,0,0,273,274,1,0,0,0,274,275,3,46,23,0,275,45,1,0,0,0,276,277,6,
		23,-1,0,277,302,3,68,34,0,278,302,5,66,0,0,279,302,3,16,8,0,280,289,5,
		6,0,0,281,286,3,46,23,0,282,283,5,11,0,0,283,285,3,46,23,0,284,282,1,0,
		0,0,285,288,1,0,0,0,286,287,1,0,0,0,286,284,1,0,0,0,287,290,1,0,0,0,288,
		286,1,0,0,0,289,281,1,0,0,0,289,290,1,0,0,0,290,291,1,0,0,0,291,302,5,
		7,0,0,292,293,5,4,0,0,293,294,3,46,23,0,294,295,5,5,0,0,295,302,1,0,0,
		0,296,297,5,12,0,0,297,302,3,46,23,12,298,299,3,52,26,0,299,300,3,46,23,
		10,300,302,1,0,0,0,301,276,1,0,0,0,301,278,1,0,0,0,301,279,1,0,0,0,301,
		280,1,0,0,0,301,292,1,0,0,0,301,296,1,0,0,0,301,298,1,0,0,0,302,348,1,
		0,0,0,303,304,10,9,0,0,304,305,5,32,0,0,305,347,3,46,23,10,306,307,10,
		8,0,0,307,308,5,33,0,0,308,347,3,46,23,9,309,310,10,7,0,0,310,311,5,31,
		0,0,311,347,3,46,23,8,312,313,10,6,0,0,313,314,3,50,25,0,314,315,3,46,
		23,7,315,347,1,0,0,0,316,317,10,5,0,0,317,318,3,48,24,0,318,319,3,46,23,
		6,319,347,1,0,0,0,320,321,10,4,0,0,321,322,3,52,26,0,322,323,3,46,23,5,
		323,347,1,0,0,0,324,325,10,3,0,0,325,326,3,54,27,0,326,327,3,46,23,4,327,
		347,1,0,0,0,328,329,10,2,0,0,329,330,3,56,28,0,330,331,3,46,23,3,331,347,
		1,0,0,0,332,333,10,1,0,0,333,334,5,16,0,0,334,335,3,46,23,0,335,336,5,
		14,0,0,336,337,3,46,23,2,337,347,1,0,0,0,338,339,10,15,0,0,339,340,5,15,
		0,0,340,347,3,16,8,0,341,342,10,11,0,0,342,343,5,6,0,0,343,344,3,46,23,
		0,344,345,5,7,0,0,345,347,1,0,0,0,346,303,1,0,0,0,346,306,1,0,0,0,346,
		309,1,0,0,0,346,312,1,0,0,0,346,316,1,0,0,0,346,320,1,0,0,0,346,324,1,
		0,0,0,346,328,1,0,0,0,346,332,1,0,0,0,346,338,1,0,0,0,346,341,1,0,0,0,
		347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,47,1,0,0,0,350,348,
		1,0,0,0,351,352,7,0,0,0,352,49,1,0,0,0,353,354,7,1,0,0,354,51,1,0,0,0,
		355,356,7,2,0,0,356,53,1,0,0,0,357,358,7,3,0,0,358,55,1,0,0,0,359,360,
		7,4,0,0,360,57,1,0,0,0,361,362,7,5,0,0,362,59,1,0,0,0,363,364,5,54,0,0,
		364,365,3,68,34,0,365,366,5,14,0,0,366,367,3,62,31,0,367,370,1,0,0,0,368,
		370,3,66,33,0,369,363,1,0,0,0,369,368,1,0,0,0,370,61,1,0,0,0,371,375,5,
		8,0,0,372,374,3,4,2,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,1,0,0,0,
		375,376,1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,379,5,9,0,0,379,63,
		1,0,0,0,380,384,5,8,0,0,381,383,3,60,30,0,382,381,1,0,0,0,383,386,1,0,
		0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,384,1,0,0,0,387,
		388,5,9,0,0,388,65,1,0,0,0,389,390,5,52,0,0,390,391,5,14,0,0,391,392,3,
		62,31,0,392,67,1,0,0,0,393,398,5,65,0,0,394,398,5,67,0,0,395,398,3,72,
		36,0,396,398,5,68,0,0,397,393,1,0,0,0,397,394,1,0,0,0,397,395,1,0,0,0,
		397,396,1,0,0,0,398,69,1,0,0,0,399,400,5,20,0,0,400,71,1,0,0,0,401,402,
		7,6,0,0,402,73,1,0,0,0,32,77,87,100,106,116,121,145,148,155,166,169,181,
		192,196,200,207,216,221,234,237,240,266,272,286,289,301,346,348,369,375,
		384,397
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
